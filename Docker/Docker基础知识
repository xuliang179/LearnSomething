#docker基础知识

docker开源项目，基于Go语言实现的云源项目，dotCloud公司，逐渐形成了docker生态体系
目标：Build，Ship and Run Any App，Anywhere
即通过对应用组件的封装packaging、分发distribution、部署deployment、运行runtime等生命周期的管理，达到应用组件级别的“一次封装，到处运行”
这里的应用组件，既可以是一个web应用，也可以是一套数据库服务，甚至是一个操作系统或编译器


#容器 
docker容器是操作系统级别的虚拟化解决方案，依赖于linux内核特性：Namespace和Cgroup（Control Group）
docker容器（可理解一种沙盒），每个容器内运行一个应用，不同容器相互隔离，容器之间也可以建立通信机制。
容器的创建和停止都十分快速，容器自身对资源的需求也十分有限
容器的好处：高效地构建应用，开发者需要方便创建运行在云平台上的应用，也就是说应用必须能够脱离底层机器，而且同时必须是“任何时间任何地点”可获取
服务器虚拟化的核心是对资源（服务器，网络，存储等）进行抽象，目标往往是为了在同一台主机上运行多个系统或应用，从而提高系统资源的利用率，
同时带来降低成本、方便管理和容错等好处

#namespaces命名空间/Control groups控制组
代码隔离，操作系统上的系统资源隔离（进程、网络、文件系统等）
-PID (Process ID) 进程隔离 
-NET (network)    管理网络接口 
-IPC (InterProcessCommunication)  管理跨进程通信的访问  
-MNT (mount) 管理挂载点 
-UTS (Unix Timesharing System) 隔离内核和版本标识
Control groups控制组
-用来分配资源
-linux kernel2.6.24以后的版本 
-资源限制,优先级设定,资源计量,资源控制
docker容器能力
-文件系统隔离：每个容器都有自己的root文件系统
-进程隔离：每个容器都运行在自己的进程环境中
-网络隔离：容器间的虚拟网络接口和IP地址都是分开的
-资源隔离和分组：使用cgroups将CPU和内存之类的资源独立分配给每个docker容器

#Docker的使用场景
1.使用Docker容器开发、测试、部署服务
2.创建隔离的运行环境
3.搭建测试环境
4.构建多用户的平台即服务PaaS基础设施
5.提供软件即服务SaaS应用程序
6.高性能、超大规模的宿主机部署
结合openstack+docker 
